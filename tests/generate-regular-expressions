#!/usr/bin/ruby
#
# generate regular expressions from the unofficial gentoo PMS ABNF
#
#  bugs: does not respect capitals due to decision of ABNF being
#        readable versus encoded. needs a prior filter to convert
#        ABNF spec to numeric \x... style entity definitions, then
#        the //i output can be clipped and regex will be correct.
#
require 'pp'
require 'abnf'

abnf_input_file = '../src/pms.abnf'
source_abnf = ''

File.open(abnf_input_file) {|f|
 source_abnf = f.read
}

source_abnf_line_count = %x{wc -l #{abnf_input_file}}.split.first.to_i

# we need to shuffle the text so that the 'first' element within the
# ABNF is cycled to all actual element definitions. in order to do
# this we get a line count to remember the end of the file, then
# progressively re-order line by line, re-processing where we think
# an entity definition actually begins (ie. line is not blank, or a 
# comment, and begins with an ABNF-like identifier followed by some 
# spaces and an equals sign)

# split the text in to lines
abnf_lines = source_abnf.split(/\n/)

# iterate
for i in 0..source_abnf_line_count do
 # skip indices beyond the end, and blank lines
 if abnf_lines[i] and (abnf_lines[i]!="")
  # if we're at a definition...
  if abnf_lines[i].match(/^[a-z0-9-]+ +=/)
   # shufflin'
   tmp = ''
   for j in i..source_abnf_line_count-1 do
    tmp += abnf_lines[j] << "\n"
   end
   for j in 0..i-1 do
    tmp += abnf_lines[j] << "\n"
   end
   print abnf_lines[i].split(/ *=/)[0]
   print " = "
   pp ABNF.regexp_tree(tmp).regexp
  end
 end
end
